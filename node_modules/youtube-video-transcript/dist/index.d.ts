interface Transcription {
    language: string;
    type: string;
    data: Array<{
        text: string;
        start: number;
        duration: number;
    }>;
}
declare class TranscriptionList {
    private transcriptions;
    constructor(transcriptions: Array<Transcription>);
    list(): Array<Transcription>;
    getManual(): Transcription | undefined;
    getAuto(): Transcription | undefined;
    get(language: string): Transcription | undefined;
    getMultiple(languages: Array<string>): Array<Transcription>;
}

declare class TranscriptionDisabledError extends Error {
    constructor();
}
declare class VideoUnavailableError extends Error {
    constructor();
}
declare class InvalidVideoUrlError extends Error {
    constructor();
}
declare class InvalidLanguageError extends Error {
    constructor();
}
declare class TooManyRequestsError extends Error {
    constructor();
}
declare class LanguageNotAvailableError extends Error {
    constructor();
}

interface ProxyOptions {
    url: string;
    headers: {};
}

declare class Core {
    private proxy;
    constructor();
    protected fetchVideo(videoId: string): Promise<string>;
    setProxy(options: ProxyOptions): this;
    protected fetchHtml(videoId: string): Promise<string>;
    protected fetchMetadata(url: string): Promise<any>;
    protected getVideoId(url: string): string;
}

declare class Transcriptor extends Core {
    constructor();
    getTranscript(url: string, languages?: Array<string> | string): Promise<Transcription[] | Transcription>;
    getTranscripts(urls: Array<string> | string, languages?: Array<string> | string): Promise<Transcription[]>;
    listTranscripts(url: string): Promise<TranscriptionList>;
    private fetchXmlTranscript;
}

declare const _default: Transcriptor;

export { InvalidLanguageError, InvalidVideoUrlError, LanguageNotAvailableError, TooManyRequestsError, type Transcription, TranscriptionDisabledError, TranscriptionList, Transcriptor, VideoUnavailableError, _default as default };
